commands:

# создать файл конфигурации в каталоге пользователя
ansible-config init --disable > ansible.cfg
-------------------------
#
ansible-config view

-------------------------
# найти каталог расположения python и указать в конфиге в разделе default
whereis python
nano ./ansible.cfg 

[defaults]
remote_user=root
interpreter_python=/usr/bin/python
private_key_file=/root/.ssh/otus_rsa
inventory = ./inventory.yml
---------------------------
# 
ansible -m ping -i inventory.yml otus_web
192.168.122.87 | SUCCESS => {
    "ansible_facts": {
        "discovered_interpreter_python": "/usr/bin/python3.12"
    },
    "changed": false,
    "ping": "pong"
}
--------------------------
# вывод содержимого файла inventory в формате yaml
ansible-inventory -i ./inventory.yml --list
{
    "_meta": {
        "hostvars": {}
    },
    "all": {
        "children": [
            "ungrouped",
            "otus_web",
            "otus_hosts"
        ]
    },
    "otus_basic": {
        "hosts": [
            "192.168.122.53 192.168.122.153 192.168.122.155 192.168.122.201 192.168.122.211"
        ]
    },
.....
# в графическом формате содержимое всего файла
ansible-inventory -i ./inventory.yml --graph 
@all:
  |--@ungrouped:
  |--@otus_web:
  |  |--192.168.122.87
  |--@otus_hosts:
  |  |--@otus_prof:
  |  |  |--192.168.122.87
  |  |--@otus_basic:
  |  |  |--192.168.122.53 192.168.122.153 192.168.122.155 192.168.122.201 192.168.122.211

# либо для конкретной группы
ansible-inventory -i ./inventory.yml --graph otus_web
-------------------------

# вывод набора facts с помощью модуля SETUP
ansible -m setup -i inventory.yml otus_web
# фильтр по смонтированным устройствам
ansible -m setup -a 'filter=ansible_mounts' otus_web
-------------------------
