version: "3"

services:
  database:
#    image: mysql:8.0 # используем готовый образ mysql от разработчиков
#    image: mysql:8.4.0-oraclelinux8
    image: mysql:5.7

    container_name: wp-database
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_USER: wp_user
      MYSQL_PASSWORD: ${DB_ROOT_PASSWORD}        
    volumes:
      - ./dbdata:/var/lib/mysql
#    command: '--default-authentication-plugin=mysql_native_password'
#    command: '--default-authentication-plugin=caching_sha2_password'
#    command: '--mysql-native-password=ON'
    networks:
      - app-network

  wordpress:
    image: wordpress:5.1.1-fpm-alpine
    container_name: wordpress
    restart: unless-stopped
# какие можно задать переменные контейнеру https://hub.docker.com/_/wordpress
    environment:
      WORDPRESS_DB_HOST: wp-database:3306
      WORDPRESS_DB_NAME: "${DB_NAME}"
      WORDPRESS_DB_USER: wp_user
      WORDPRESS_DB_PASSWORD: "${DB_ROOT_PASSWORD}"
    volumes:
      - ./wordpress:/var/www/html
    networks:
      - app-network
    depends_on:
      - database

  nginx:
    image: nginx:1.15.12-alpine
    container_name: nginx
    restart: unless-stopped
    ports:
      - 8083:8083
      - 8081:8081
      - 8082:8082
    volumes:
      - ./wordpress:/var/www/html
      - ./nginx-conf:/etc/nginx/conf.d 
    networks:
      - app-network
    depends_on: 
      - wordpress
      - app
      - node

  app:
    build: ./python 
    container_name: app
    restart: always
    env_file:
      - .env 
    command:
      "gunicorn --workers=2 --bind=0.0.0.0:8000 mysite.wsgi:application" 
    networks:
      - app-network

  node:
    image: node:16.13.2-alpine3.15
    container_name: node
    working_dir: /opt/server 
    volumes:
      - ./node:/opt/server 
    command: node test.js 
    networks:
      - app-network

volumes:
  dbdata: {}
  wordpress: {}
  node: {}

networks:
  app-network:
    driver: bridge
